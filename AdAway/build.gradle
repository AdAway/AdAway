apply plugin: 'com.android.application'
repositories {
    jcenter()
    maven {
        url "https://s3.amazonaws.com/repo.commonsware.com"
    }
    maven {
        url "https://maven.google.com"
    }
}
dependencies {

    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:support-v4:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:preference-v7:25.3.1'
    compile 'com.evernote:android-job:1.1.10'
    compile project(':libraries:RootCommands')
    compile 'net.sf.trove4j:trove4j:3.0.3'
    compile 'com.android.support:support-v4:25.3.1'
    compile 'org.sufficientlysecure:html-textview:2.0'
    compile 'org.sufficientlysecure:donations:2.4'
}

android {
    sourceSets {
        instrumentTest.setRoot('tests')
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    compileSdkVersion 25
    buildToolsVersion '25.0.3'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25

    }

    /*
     * To sign release build, create file gradle.properties in ~/.gradle/ with this content:
     *
     * signingStoreLocation=/home/key.store
     * signingStorePassword=xxx
     * signingKeyAlias=alias
     * signingKeyPassword=xxx
     */
    if (project.hasProperty('signingStoreLocation') &&
            project.hasProperty('signingStorePassword') &&
            project.hasProperty('signingKeyAlias') &&
            project.hasProperty('signingKeyPassword')) {
        println "Found sign properties in gradle.properties! Signing buildâ€¦"

        signingConfigs {
            release {
                storeFile file(signingStoreLocation)
                storePassword signingStorePassword
                keyAlias signingKeyAlias
                keyPassword signingKeyPassword
            }
        }

        buildTypes.release.signingConfig = signingConfigs.release
    } else {
        buildTypes.release.signingConfig = null
    }

    // Do not abort build if lint finds errors
    lintOptions {
        abortOnError false
    }

    externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
        }
    }
}

/**
 * Task to rename executables from hello_world to libhello_world_exec.so
 * If they look like libraries, they are packaged in the apk and deployed on the device in the lib folder!
 *
 * http://www.gradle.org/docs/current/userguide/working_with_files.html
 */
task renameExecutables(type: Copy) {
    from 'libs'
    into 'libs'
    include '**/*'
    exclude '**/*.so'
    exclude '**/*.jar'

    rename(/(.+)/, 'lib$1_exec.so')
}

build.dependsOn renameExecutables
tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn renameExecutables
}
